<style>
    input[gp-problematic] {
        border: 2px yellow dashed;
        background-color: black;
        color: white;
    }
    #sgdbicons {
        position: fixed;
        top: 0;
        left: 0;
        margin: 4em 1em 1em 0.5em;
        width: 550px;
    }
    #sgdbicons h2 {
        margin: 0;
    }
    #sgdbarea {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 10px;
    }
    .sgdbicon {
        width: 128px;
        height: 128px;
        cursor: pointer;
    }
</style>

<form method="post" enctype="multipart/form-data">
    <img id="iconpreview" src="<%= game ? `/game/${game._id}/icon` : "/placeholder.png" %>" style="float: left; margin-right: 1em;" width="96" height="96">
    <h2>Basic information</h2>
    <label>Game name: <input type="text" name="gamename" required value="<%= game?.name %>"></label><br>
    <label>Game icon: <input type="file" name="icon" accept="image/png, image/vnd.microsoft.icon" onchange="renderImage()"></label>
    <input type="hidden" name="iconurl">
    <h2 style="margin-bottom: 0;">Executables <button onclick="addExecutable(event)">new</button> <button onclick="autofillExecutables(event)">fetch from steam</button></h2>
    <table id="executablearea">
        <% game?.executables.forEach(function(executable, index) { %>
            <tr id="executable_wrap_<%= index %>">
                <td><input type='text' name='executable_name_<%= index %>' placeholder='name' value="<%= executable.name %>" oninput="smartName(event)"></td>
                <td><input type='text' name='executable_arguments_<%= index %>' placeholder='arguments' value="<%= executable.arguments %>"></td>
                <td><input type='text' name='executable_platform_<%= index %>' placeholder='platform' required value="<%= executable.platform %>"></td>
                <td><button onclick="event.preventDefault();this.parentNode.parentNode.remove();">delete</button></td>
            </tr>
        <% }); %>
    </table>

    <h3 style="margin-bottom: 0;">Done ^-^</h3>
    <input type="submit">
</form>
<dialog id="sgdbicons">
    <h2>Icons on SteamGridDB <button style="float: right" onclick="document.querySelector('#sgdbicons').close()">close</button></h2>
    <div id="sgdbarea">

    </div>
</dialog>
<script>
    function addExecutable(e, data) {
        e?.preventDefault();

        const executable = document.createElement("tr");
        const curRow = document.querySelector("[id^='executable_wrap_']") ? parseInt(Array.from(document.querySelectorAll("[id^='executable_wrap_']")).slice(-1)[0].id.split("_")[2]) + 1 : 0
        executable.id = `executable_wrap_${curRow}`
        executable.innerHTML += `<td><input type='text' name='executable_name_${curRow}' placeholder='name' pattern='.*(?<!\.app|\.sh|\.bat)$' oninput='smartName(event)'></td>`
        executable.innerHTML += `<td><input type='text' name='executable_arguments_${curRow}' placeholder='arguments'></td>`
        executable.innerHTML += `<td><input type='text' name='executable_platform_${curRow}' placeholder='platform' required></td>`

        executable.innerHTML += `<td><button onclick="event.preventDefault();this.parentNode.parentNode.remove();">delete</button></td>`

        document.querySelector("#executablearea").appendChild(executable);

        if(data) {
            if(data.problematic) document.querySelector(`input[name='executable_name_${curRow}']`).setAttribute("gp-problematic", "unfortunately")
            if(data.depotUrl) document.querySelector(`input[name='executable_name_${curRow}']`).setAttribute("gp-depot", data.depotUrl)
            if(data.name) document.querySelector(`input[name='executable_name_${curRow}']`).value = data.name;
            if(data.arguments) document.querySelector(`input[name='executable_arguments_${curRow}']`).value = data.arguments;
            if(data.platform) document.querySelector(`input[name='executable_platform_${curRow}']`).value = data.platform;
        }
    }

    async function autofillExecutables(e) {
        e?.preventDefault();

        let steamFillRequest = await fetch(`/steam/${document.querySelector("input[name='gamename']").value}`);
        if(!steamFillRequest.ok) {
            alert("Server error")
            new Audio("/sfx/autofill_problematic.wav").play();
            cubismMotion("/cubism/hiyori_pro/motion/hiyori_m10.motion3.json");
            return;
        }
        let steamFill = await steamFillRequest.json();

        document.querySelector("input[name='gamename']").value = steamFill.name
        document.querySelector("[name=iconurl]").value = steamFill.icons[0];
        document.querySelector("#iconpreview").src = steamFill.icons[0];
        document.querySelector("#iconpreview").onclick = function() {
            if(steamFill.icons.length > 1) {
                document.querySelector("#sgdbicons").show();
            } else {
                alert("SteamGridDB did not have any icons.");
            }
        }

        if(steamFill.icons.length > 1) {
            document.querySelector("#sgdbarea").innerHTML = "";
            steamFill.icons.slice(1).forEach(icon => document.querySelector("#sgdbarea").innerHTML += `<img src="${icon}" onClick="sgdbIcon(event)" class="sgdbicon">`)
        }

        document.querySelector("#executablearea").innerHTML = "";

        let depots = {
            "windows": null,
            "macos": null,
            "linux": null
        }
        Object.entries(steamFill.depots).forEach(([id, data]) => {
            if(depots[data.config?.oslist]) depots[data.config?.oslist] = "toomany"
            if(!depots[data.config?.oslist]) depots[data.config?.oslist] = parseInt(id)
        })

        let problematic = false;
        steamFill.executables.forEach(function(executable) {
            let exeName = executable.executable.toLowerCase();
            if(!problematic) problematic = nameProblematic(exeName);

            addExecutable(undefined, {
                name: exeName,
                arguments: executable.arguments,
                platform: !executable.config?.oslist ? "win32" : executable.config.oslist === "windows" ? "win32" : executable.config.oslist === "macos" ? "darwin" : "linux",
                problematic: nameProblematic(exeName),
                depotUrl: !isNaN(parseInt(depots[executable.config?.oslist])) ? `https://steamdb.info/depot/${depots[executable.config?.oslist]}#files` : `https://steamdb.info/app/${steamFill.steamAppId}/depots#depots`
            })
        })

        if(problematic) {
            new Audio("/sfx/autofill_problematic.wav").play();
            cubismMotion("/cubism/hiyori_pro/motion/hiyori_m09.motion3.json");
        } else {
            new Audio("/sfx/autofill_success.mp3").play();
            cubismMotion("/cubism/hiyori_pro/motion/hiyori_m08.motion3.json");
        }
    }

    function renderImage() {
        const fileReader = new FileReader();
        fileReader.readAsDataURL(document.querySelector("[name='icon']").files[0]);
        fileReader.onload = (e) => document.querySelector("#iconpreview").src = e.target.result;
    }

    function smartName(e) {
        e.target.value = e.target.value.toLowerCase();

        const platform = document.querySelector(`input[name="executable_platform_${e.target.name.split("executable_name_")[1]}"]`)
        if(e.target.value.endsWith(".exe")) {
            platform.value = "win32";
        } else if (/.*\.app\//.test(e.target.value)) {
            platform.value = "darwin"
        }

        if(e.target.getAttribute("gp-problematic") && !nameProblematic(e.target.value)) {
            e.target.removeAttribute("gp-problematic");
            cubismMotion("/cubism/hiyori_pro/motion/hiyori_m08.motion3.json");
            new Audio("/sfx/autofill_repaired.wav").play();
        }
    }

    function nameProblematic(name) {
        if(name.endsWith(".app") || name.endsWith(".sh") || name.endsWith(".bat") || name === "game.exe" || name === "launcher.exe") return true;
        return false;
    }

    function sgdbIcon(event) {
        let iconURL = event.target.src;

        document.querySelector("[name=iconurl]").value = iconURL;
        document.querySelector("#iconpreview").src = iconURL;
        document.querySelector("#sgdbicons").close();
    }

    document.addEventListener("DOMContentLoaded", function() {
        <% if (!game) { %> addExecutable(); <% } %>

        document.querySelector("#executablearea").addEventListener('mousedown', function(e) {
            if (e.button === 1 && e.target?.getAttribute("gp-depot")) {
                e.preventDefault();
                window.open(e.target.getAttribute("gp-depot"), "_blank")
            }
        }, true);
    })
</script>
